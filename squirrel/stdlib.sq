(block

    [ define a function called 'fun' to simplify defining functions
      def example: (def {name} (lambda {arguments} {body}))
      fun example: (fun {name arguments} {body}) ]
    (def {fun}
        (lambda {prototype body}
            {outer (quote (head prototype)) (lambda (tail prototype) body)}))



    [ boolean and logical functions ]

    (fun {if condition outcome-if-true outcome-if-false}
        {when
            {condition (eval outcome-if-true)}
            {true (eval outcome-if-false)}})

    (fun {not condition}
        {if condition
            {false}
            {true}})

    (fun {ne x y}
        {not (eq x y)})

    (fun {and condition-one condition-two}
        {if condition-one
            {condition-two}
            {false}})

    (fun {or condition-one condition-two}
        {if condition-one
            {true}
            {condition-two}})

    (fun {ge x y}
        {or (gt x y) (eq x y)})

    (fun {le x y}
        {or (lt x y) (eq x y)})



    [ math functions ]

    (fun {abs x}
        {if (lt x 0)
            {sub 0 x}
            {x}})

    (fun {square x} {mul x x})

    (fun {cube x} {mul x x x})

    (fun {is-even x}
        {eq 0 (mod x 2)})

    (fun {is-odd x}
        {ne 0 (mod x 2)})

    (fun {factorial x}
        {if (eq x 0)
            {1}
            {mul x (factorial (sub x 1))}})



    [ list functions ]

    (def {nil} {})

    (fun {first list}
        {nth list 1})

    (fun {last list}
        {nth list (len list)})

    (fun {is-empty list}
        {eq 0 (len list)})

    [ returns a list of numbers from 1 to x | (range 3) -> {1 2 3} ]
    (fun {range x}
        {if (le x 0)
            {nil}
            {join (range (sub x 1)) (quote x)}})

    [ reverses a list | (reverse {1 2 3}) -> {3 2 1} ]
    (fun {reverse list}
        {if (is-empty list)
            {nil}
            {join
                (reverse (tail list))
                (quote (head list))}})

    [ applies a function to every item in a list | (map square {1 2 3}) -> {1 4 9} ]
    (fun {map function list}
        {if (is-empty list)
            {nil}
            {join
                (quote (function (first list)))
                (map function (tail list))}})

    (fun {foreach list function}
        {map function list})

    [ applies a function against an accumulator and each item in a list to reduce the list to a single value ]
    (fun {reduce function list acc}
        {if (is-empty list)
            {acc}
            {reduce function (tail list) (function acc (first list))}})

    (fun {sum list}
        {reduce add list 0})

    (fun {product list}
        {reduce mul list 1})

    [ return the items in a list for which the function returns true | (filter is-odd (range 5)) -> {1 3 5} ]
    (fun {filter function list}
        {if (is-empty list)
            {nil}
            {join
                (block
                    (def {item} (first list))
                    (if (function item)
                        {quote item}
                        {nil}))
                (filter function (tail list))}})

    [ returns true if the function returns true for every item in the list | (every is-odd {1 3 5}) -> true ]
    (fun {every function list}
        {eq (len list) (len (filter function list))})

    [ returns true if the function returns true for at least one item in the list | (some is-odd {2 4 6}) -> false ]
    (fun {some function list}
        {not (is-empty (filter function list))})
)
